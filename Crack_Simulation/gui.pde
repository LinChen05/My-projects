/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

synchronized public void Modes(PApplet appc, GWinData data) { //_CODE_:Mode_Selector:334005:
  appc.background(230);
} //_CODE_:Mode_Selector:334005:

public void Thunder_eff(GButton source, GEvent event) { //_CODE_:button1:677021:
  mode = "Thunder"; //it will switch to thunder mode
  thunders.clear();// clears out all crack and thunder
  cracks.clear();
} //_CODE_:button1:677021:

public void Crack_eff(GButton source, GEvent event) { //_CODE_:button2:347771:
  mode = "Crack"; //switch mode to crack
  thunders.clear();// clears out all crack and thunder
  cracks.clear();} //_CODE_:button2:347771:

synchronized public void crackingwindow(PApplet appc, GWinData data) { //_CODE_:CrackS:824822:
  appc.background(230);
} //_CODE_:CrackS:824822:

//the following gui program follows the same rule
//depending on if the current mode is thunder or crack. Change the given varible that the gui textbox/button is responsible for
//it will change the varible from true or false if it is a button, or change the varible from the text box
//the modes share common gui as it is more simple
public void button_unlimited(GButton source, GEvent event) { //_CODE_:buttonU:484619:
  if(mode == "Crack"){
    if(unlimitedCrack){
      unlimitedCrack = false;
    }
    else{
      unlimitedCrack = true;      
    }
  }
  else{ //Rain on or off
    if(isRaining){
        isRaining = false;
      }
      else{
        isRaining = true;      
      }  
  }
} //_CODE_:buttonU:484619:

public void button_rainbow(GButton source, GEvent event) { //_CODE_:buttonR:706122:
  if(mode == "Crack"){
    if(rainbow){
      rainbow = false;
    }
    else{
      rainbow = true;
    }
  }
  else{ //flash on or off
    if(flashON){
      flashON = false;
    }
    else{
      flashON = true;
    }
  }
} //_CODE_:buttonR:706122:

public void RateL(GTextField source, GEvent event) { //_CODE_:rateL:649660:
  if(mode == "Crack"){
    rateOfLose = float(rateL.getText())/100;
  }
  else{ //generation limits
     genLimit = float(rateL.getText());
  }
} //_CODE_:rateL:649660:

public void EnergyM(GTextField source, GEvent event) { //_CODE_:EM:242151:
  if(mode == "Crack"){
    energyRate = float(EM.getText());
  }
  else{//Thunder duration
    thunderDuration = float(EM.getText());
  }
} //_CODE_:EM:242151:

public void NumberS(GTextField source, GEvent event) { //_CODE_:NumberSplit:378059:
  if(mode == "Crack"){
    NumberOfSplit = int(NumberSplit.getText());
  }
  else{//length multiplier
    lengthMultiplier = int(NumberSplit.getText());
  }
} //_CODE_:NumberSplit:378059:

public void r(GTextField source, GEvent event) { //_CODE_:reds:533135:
  if(mode == "Crack"){
    Cred = int(reds.getText());
  }
  else{//TR
    Tred = int(reds.getText());
  }
} //_CODE_:reds:533135:

public void g(GTextField source, GEvent event) { //_CODE_:greens:310305:
  if(mode == "Crack"){
    Cgreen = int(greens.getText());
  }
  else{//TG
    Tgreen = int(greens.getText());
  }
} //_CODE_:greens:310305:

public void b(GTextField source, GEvent event) { //_CODE_:blues:561928:
  if(mode == "Crack"){
    Cblue = int(blues.getText());
  }
  else{
    Tblue = int(blues.getText());
  }
} //_CODE_:blues:561928:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  Mode_Selector = GWindow.getWindow(this, "Window title", 0, 0, 240, 160, JAVA2D);
  Mode_Selector.noLoop();
  Mode_Selector.setActionOnClose(G4P.KEEP_OPEN);
  Mode_Selector.addDrawHandler(this, "Modes");
  button1 = new GButton(Mode_Selector, 30, 13, 80, 30);
  button1.setText("Thunder");
  button1.addEventHandler(this, "Thunder_eff");
  button2 = new GButton(Mode_Selector, 125, 12, 80, 30);
  button2.setText("Crack");
  button2.addEventHandler(this, "Crack_eff");
  Mode = new GLabel(Mode_Selector, 37, 46, 158, 20);
  Mode.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  Mode.setText("Crack");
  Mode.setOpaque(false);
  label3 = new GLabel(Mode_Selector, 40, 68, 148, 20);
  label3.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label3.setText("Press R to reset values");
  label3.setOpaque(false);
  label4 = new GLabel(Mode_Selector, 25, 93, 190, 20);
  label4.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label4.setText("Press C to clear out the cracks");
  label4.setOpaque(false);
  label5 = new GLabel(Mode_Selector, 13, 122, 218, 28);
  label5.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label5.setText("note: when changing modes, much sure the cracks aren't growing");
  label5.setOpaque(false);
  CrackS = GWindow.getWindow(this, "CrackSetting", 0, 400, 340, 240, JAVA2D);
  CrackS.noLoop();
  CrackS.setActionOnClose(G4P.KEEP_OPEN);
  CrackS.addDrawHandler(this, "crackingwindow");
  RateLoss = new GLabel(CrackS, 2, 22, 145, 20);
  RateLoss.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  RateLoss.setText("Rate of Loss");
  RateLoss.setOpaque(false);
  energyMult = new GLabel(CrackS, 2, 63, 147, 20);
  energyMult.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  energyMult.setText("energy Multiplier");
  energyMult.setOpaque(false);
  Num_split = new GLabel(CrackS, 2, 102, 150, 20);
  Num_split.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  Num_split.setText("Number of Split");
  Num_split.setOpaque(false);
  buttonU = new GButton(CrackS, 48, 200, 80, 30);
  buttonU.setText("Face text");
  buttonU.addEventHandler(this, "button_unlimited");
  unlimitedCrackG = new GLabel(CrackS, 24, 175, 124, 20);
  unlimitedCrackG.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  unlimitedCrackG.setText("Unlimited Cracks");
  unlimitedCrackG.setOpaque(false);
  buttonR = new GButton(CrackS, 179, 198, 80, 30);
  buttonR.setText("Face text");
  buttonR.addEventHandler(this, "button_rainbow");
  rainbowG = new GLabel(CrackS, 152, 175, 129, 20);
  rainbowG.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  rainbowG.setText("raindbow Mode");
  rainbowG.setOpaque(false);
  rateL = new GTextField(CrackS, 152, 19, 115, 23, G4P.SCROLLBARS_NONE);
  rateL.setOpaque(true);
  rateL.addEventHandler(this, "RateL");
  EM = new GTextField(CrackS, 155, 64, 109, 19, G4P.SCROLLBARS_NONE);
  EM.setOpaque(true);
  EM.addEventHandler(this, "EnergyM");
  NumberSplit = new GTextField(CrackS, 154, 101, 113, 21, G4P.SCROLLBARS_NONE);
  NumberSplit.setOpaque(true);
  NumberSplit.addEventHandler(this, "NumberS");
  colorText = new GLabel(CrackS, -1, 139, 41, 20);
  colorText.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  colorText.setText("Color");
  colorText.setOpaque(false);
  label1 = new GLabel(CrackS, 41, 137, 43, 20);
  label1.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label1.setText("R:");
  label1.setOpaque(false);
  G = new GLabel(CrackS, 125, 139, 48, 20);
  G.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  G.setText("G:");
  G.setOpaque(false);
  B = new GLabel(CrackS, 234, 138, 50, 20);
  B.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  B.setText("B:");
  B.setOpaque(false);
  reds = new GTextField(CrackS, 85, 137, 38, 20, G4P.SCROLLBARS_NONE);
  reds.setOpaque(true);
  reds.addEventHandler(this, "r");
  greens = new GTextField(CrackS, 175, 137, 57, 22, G4P.SCROLLBARS_NONE);
  greens.setOpaque(true);
  greens.addEventHandler(this, "g");
  blues = new GTextField(CrackS, 286, 137, 49, 22, G4P.SCROLLBARS_NONE);
  blues.setOpaque(true);
  blues.addEventHandler(this, "b");
  label2 = new GLabel(CrackS, 51, 0, 138, 20);
  label2.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label2.setText("Crack Setting");
  label2.setOpaque(false);
  Mode_Selector.loop();
  CrackS.loop();
}

// Variable declarations 
// autogenerated do not edit
GWindow Mode_Selector;
GButton button1; 
GButton button2; 
GLabel Mode; 
GLabel label3; 
GLabel label4; 
GLabel label5; 
GWindow CrackS;
GLabel RateLoss; 
GLabel energyMult; 
GLabel Num_split; 
GButton buttonU; 
GLabel unlimitedCrackG; 
GButton buttonR; 
GLabel rainbowG; 
GTextField rateL; 
GTextField EM; 
GTextField NumberSplit; 
GLabel colorText; 
GLabel label1; 
GLabel G; 
GLabel B; 
GTextField reds; 
GTextField greens; 
GTextField blues; 
GLabel label2; 
